__doc__:
    value: "Config object.\n\n    Config objects are intended to hold all of the hyperparameters associated with\n    a wandb run and are saved with the run object when `wandb.init` is called.\n\n    We recommend setting `wandb.config` once at the top of your training experiment or\n    setting the config as a parameter to init, ie. `wandb.init(config=my_config_dict)`\n\n    You can create a file called `config-defaults.yaml`, and it will automatically be\n    loaded into `wandb.config`. See https://docs.wandb.com/guides/track/config#file-based-configs.\n\n    You can also load a config YAML file with your custom name and pass the filename\n    into `wandb.init(config=\"special_config.yaml\")`.\n    See https://docs.wandb.com/guides/track/config#file-based-configs.\n\n    Examples:\n        Basic usage\n        ```\n        wandb.config.epochs = 4\n        wandb.init()\n        for x in range(wandb.config.epochs):\n            # train\n        ```\n\n        Using wandb.init to set config\n        ```\n        wandb.init(config={\"epochs\": 4, \"batch_size\": 32})\n        for x in range(wandb.config.epochs):\n            # train\n        ```\n\n        Nested configs\n        ```\n        wandb.config['train']['epochs'] = 4\n        wandb.init()\n        for x in range(wandb.config['train']['epochs']):\n            # train\n        ```\n\n        Using absl flags\n        ```\n        flags.DEFINE_string(\"model\", None, \"model to run\")  # name, default, help\n        wandb.config.update(flags.FLAGS)  # adds all absl flags to config\n        ```\n\n        Argparse flags\n        ```python\n        wandb.init()\n        wandb.config.epochs = 4\n\n        parser = argparse.ArgumentParser()\n        parser.add_argument(\n            \"-b\",\n            \"--batch-size\",\n            type=int,\n            default=8,\n            metavar=\"N\",\n            help=\"input batch size for training (default: 8)\",\n        )\n        args = parser.parse_args()\n        wandb.config.update(args)\n        ```\n\n        Using TensorFlow flags (deprecated in tensorflow v2)\n        ```python\n        flags = tf.app.flags\n        flags.DEFINE_string(\"data_dir\", \"/tmp/data\")\n        flags.DEFINE_integer(\"batch_size\", 128, \"Batch size.\")\n        wandb.config.update(flags.FLAGS)  # adds all of the tensorflow flags to config\n        ```\n    "
_name:
    value: wandb.config
_wandb:
    value:
        cli_version: 0.19.8
        m: []
        python_version: 3.8.20
        t:
            "1":
                - 1
                - 55
            "2":
                - 1
                - 55
            "3":
                - 2
                - 14
                - 16
                - 23
                - 55
            "4": 3.8.20
            "5": 0.19.8
            "8":
                - 5
            "12": 0.19.8
            "13": darwin-arm64
entloss_coef:
    value: 0.05
eps_clip:
    value: 0.2
feature_set:
    value: LBs,finished_mark,weighted_priorities,normalized_weights,remaining_weighted_work
hidden_dim:
    value: 64
hidden_dim_actor:
    value: 32
hidden_dim_critic:
    value: 32
k_epochs:
    value: 1
log_every:
    value: 50
lr:
    value: 1e-05
max_updates:
    value: 1000
num_envs:
    value: 16
num_layers:
    value: 3
num_mlp_layers_actor:
    value: 2
num_mlp_layers_critic:
    value: 2
num_mlp_layers_feature_extract:
    value: 2
